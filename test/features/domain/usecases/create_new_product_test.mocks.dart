// Mocks generated by Mockito 5.0.7 from annotations
// in karu/test/features/domain/usecases/create_new_product_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:karu/core/usecase/errors/failures.dart' as _i5;
import 'package:karu/features/domain/entities/product_entity.dart' as _i6;
import 'package:karu/features/domain/repositories/product_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [IProductRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIProductRepository extends _i1.Mock
    implements _i3.IProductRepository {
  MockIProductRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ProductEntity>> create(
          {_i6.ProductEntity? item}) =>
      (super.noSuchMethod(Invocation.method(#create, [], {#item: item}),
          returnValue: Future<_i2.Either<_i5.Failure, _i6.ProductEntity>>.value(
              _FakeEither<_i5.Failure, _i6.ProductEntity>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i6.ProductEntity>>);
}
